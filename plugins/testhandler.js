// plugins/testhandler.js
module.exports = {
    name: 'testhandler',
    commands: ['test core', 'test media', 'test fun', 'test utils'],
    handler: async ({ sock, m, sender, args, contextInfo, isGroup }) => {
        try {
            const testType = m.text.split(' ')[1];
            const botPp = await sock.profilePictureUrl(sock.user.id, 'image').catch(() => 
                'https://files.catbox.moe/5uli5p.jpeg'
            );

            switch(testType) {
                case 'core':
                    await sock.sendMessage(
                        sender,
                        {
                            text: `‚öôÔ∏è *Core Features Testing* ‚öôÔ∏è\n\n` +
                                  `These are essential bot functions:\n\n` +
                                  `‚Ä¢ Bot Status ‚Ä¢ Commands ‚Ä¢ Settings ‚Ä¢ More`,
                            footer: `Select a feature to test`,
                            buttons: [
                                { buttonId: `${prefix}ping`, buttonText: { displayText: 'üèì Ping Test' }, type: 1 },
                                { buttonId: `${prefix}menu`, buttonText: { displayText: 'üìã Command List' }, type: 1 },
                                { buttonId: `${prefix}alive`, buttonText: { displayText: 'üíö Status Check' }, type: 1 },
                                { buttonId: `${prefix}speed`, buttonText: { displayText: '‚ö° Speed Test' }, type: 1 }
                            ],
                            contextInfo: contextInfo
                        },
                        { quoted: m }
                    );
                    break;

                case 'media':
                    await sock.sendMessage(
                        sender,
                        {
                            text: `üé® *Media Tools Testing* üé®\n\n` +
                                  `Test all media handling capabilities:\n\n` +
                                  `‚Ä¢ Images ‚Ä¢ Videos ‚Ä¢ Documents ‚Ä¢ Stickers`,
                            footer: `Select a media type to test`,
                            buttons: [
                                { buttonId: `${prefix}sticker`, buttonText: { displayText: 'üñºÔ∏è Create Sticker' }, type: 1 },
                                { buttonId: `${prefix}toimg`, buttonText: { displayText: 'üì∏ Sticker to Image' }, type: 1 },
                                { buttonId: `${prefix}mp3`, buttonText: { displayText: 'üéµ Audio Tools' }, type: 1 },
                                { buttonId: `${prefix}enhance`, buttonText: { displayText: '‚ú® Enhance Image' }, type: 1 }
                            ],
                            contextInfo: contextInfo
                        },
                        { quoted: m }
                    );
                    break;

                case 'fun':
                    await sock.sendMessage(
                        sender,
                        {
                            image: { url: botPp },
                            caption: `üéâ *Fun Modules Testing* üéâ\n\n` +
                                     `Explore entertaining features:\n\n` +
                                     `‚Ä¢ Games ‚Ä¢ Quotes ‚Ä¢ Jokes ‚Ä¢ AI Chat`,
                            footer: `What would you like to try?`,
                            buttons: [
                                { buttonId: `${prefix}quote`, buttonText: { displayText: 'üìú Random Quote' }, type: 1 },
                                { buttonId: `${prefix}joke`, buttonText: { displayText: 'üòÇ Tell a Joke' }, type: 1 },
                                { buttonId: `${prefix}ai`, buttonText: { displayText: 'ü§ñ Chat with AI' }, type: 1 },
                                { buttonId: `${prefix}game`, buttonText: { displayText: 'üéÆ Play Game' }, type: 1 }
                            ],
                            contextInfo: contextInfo
                        },
                        { quoted: m }
                    );
                    break;

                case 'utils':
                    await sock.sendMessage(
                        sender,
                        {
                            text: `üß∞ *Utility Tools Testing* üß∞\n\n` +
                                  `Practical everyday tools:\n\n` +
                                  `‚Ä¢ Downloaders ‚Ä¢ Converters ‚Ä¢ Calculators ‚Ä¢ More`,
                            footer: `Select a utility to test`,
                            buttons: [
                                { buttonId: `${prefix}calc 2+2`, buttonText: { displayText: 'üßÆ Calculator' }, type: 1 },
                                { buttonId: `${prefix}weather Nairobi`, buttonText: { displayText: '‚õÖ Weather' }, type: 1 },
                                { buttonId: `${prefix}translate hello to swahili`, buttonText: { displayText: 'üåç Translator' }, type: 1 },
                                { buttonId: `${prefix}gitclone`, buttonText: { displayText: 'üì• GitHub Download' }, type: 1 }
                            ],
                            contextInfo: contextInfo
                        },
                        { quoted: m }
                    );
                    break;

                default:
                    await sock.sendMessage(
                        sender,
                        {
                            text: '‚ö†Ô∏è Invalid test category. Use .test to see available options',
                            contextInfo: contextInfo
                        },
                        { quoted: m }
                    );
            }
        } catch (error) {
            console.error('TestHandler Error:', error);
            await sock.sendMessage(
                sender,
                {
                    text: '‚ùå Failed to process test request. Please try again.',
                    contextInfo: contextInfo
                },
                { quoted: m }
            );
        }
    }
};
